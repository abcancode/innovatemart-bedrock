---
# UI Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui
        image: public.ecr.aws/aws-containers/retail-store-sample-ui:1.3.0
        ports:
        - containerPort: 8080
        env:
        - name: ENDPOINTS_CATALOG
          value: "http://catalog:80"
        - name: ENDPOINTS_CARTS
          value: "http://carts:80"
        - name: ENDPOINTS_ORDERS
          value: "http://orders:80"
        - name: ENDPOINTS_CHECKOUT
          value: "http://checkout:80"
        - name: ENDPOINTS_ASSETS
          value: "http://assets:80"

---
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: retail-store
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: ui

---
# Catalog Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog
  template:
    metadata:
      labels:
        app: catalog
    spec:
      containers:
      - name: catalog
        image: public.ecr.aws/aws-containers/retail-store-sample-catalog:1.3.0        ports:
        - containerPort: 8080
        env:
        - name: DB_ENDPOINT
          value: catalog-mysql
        - name: DB_NAME
          value: catalog
        - name: DB_USER
          value: catalog_user
        - name: DB_PASSWORD
          value: default_password

---
apiVersion: v1
kind: Service
metadata:
  name: catalog
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: catalog

---
# MySQL for Catalog
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-mysql
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog-mysql
  template:
    metadata:
      labels:
        app: catalog-mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_DATABASE
          value: catalog
        - name: MYSQL_USER
          value: catalog_user
        - name: MYSQL_PASSWORD
          value: default_password

---
apiVersion: v1
kind: Service
metadata:
  name: catalog-mysql
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: catalog-mysql

---
# Carts Service  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: carts
  template:
    metadata:
      labels:
        app: carts
    spec:
      containers:
      - name: carts
        image: public.ecr.aws/aws-containers/retail-store-sample-carts:1.3.0
        ports:
        - containerPort: 8080
        env:
        - name: DYNAMODB_ENDPOINT
          value: http://carts-dynamodb:8000
        - name: CARTS_DYNAMODB_TABLENAME
          value: carts

---
apiVersion: v1
kind: Service
metadata:
  name: carts
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: carts

---
# DynamoDB Local for Carts
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-dynamodb
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: carts-dynamodb
  template:
    metadata:
      labels:
        app: carts-dynamodb
    spec:
      containers:
      - name: dynamodb
        image: amazon/dynamodb-local:1.3.0
        ports:
        - containerPort: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: carts-dynamodb
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: carts-dynamodb

---
# Orders Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders
  template:
    metadata:
      labels:
        app: orders
    spec:
      containers:
      - name: orders
        image: public.ecr.aws/aws-containers/retail-store-sample-orders:1.3.0
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_DATASOURCE_WRITER_URL
          value: jdbc:postgresql://orders-db:5432/orders
        - name: SPRING_DATASOURCE_WRITER_USERNAME
          value: orders_user
        - name: SPRING_DATASOURCE_WRITER_PASSWORD
          value: orders_password
        - name: SPRING_DATASOURCE_READER_URL
          value: jdbc:postgresql://orders-db:5432/orders
        - name: SPRING_DATASOURCE_READER_USERNAME  
          value: orders_user
        - name: SPRING_DATASOURCE_READER_PASSWORD
          value: orders_password

---
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: orders

---
# PostgreSQL for Orders
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders-db
  template:
    metadata:
      labels:
        app: orders-db
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: orders
        - name: POSTGRES_USER
          value: orders_user
        - name: POSTGRES_PASSWORD
          value: orders_password

---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: orders-db

---
# Assets Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: assets
  template:
    metadata:
      labels:
        app: assets
    spec:
      containers:
      - name: assets
        image: public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.5
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: assets
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: assets

---
# Checkout Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: checkout
  template:
    metadata:
      labels:
        app: checkout
    spec:
      containers:
      - name: checkout
        image: public.ecr.aws/aws-containers/retail-store-sample-checkout:1.3.0
        ports:
        - containerPort: 8080
        env:
        - name: REDIS_URL
          value: redis://checkout-redis:6379
        - name: ENDPOINTS_ORDERS
          value: http://orders:80

---
apiVersion: v1
kind: Service
metadata:
  name: checkout
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: checkout

---
# Redis for Checkout
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout-redis
  namespace: retail-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: checkout-redis
  template:
    metadata:
      labels:
        app: checkout-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: checkout-redis
  namespace: retail-store
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: checkout-redis